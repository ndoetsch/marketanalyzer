import streamlit as st
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt

# Streamlit app setup
st.title("Stock Market Visualizer")
st.write("Analyze and visualize stock market data interactively.")

# Instructions for GitHub Integration
st.sidebar.header("GitHub Integration")
st.sidebar.write("Follow these steps to integrate this app with GitHub:")
st.sidebar.write("1. Initialize a Git repository in your project directory using `git init`.")
st.sidebar.write("2. Add your files to the repository with `git add .`.")
st.sidebar.write("3. Commit your changes using `git commit -m 'Initial commit'`.")
st.sidebar.write("4. Create a new repository on GitHub.")
st.sidebar.write("5. Link your local repository to GitHub with `git remote add origin <repository-url>`.")
st.sidebar.write("6. Push your code to GitHub using `git push -u origin main`.")

# Sidebar inputs
st.sidebar.header("Input Options")
selected_ticker = st.sidebar.text_input("Enter stock ticker (e.g., AAPL, MSFT):", value="AAPL")
start_date = st.sidebar.date_input("Start Date:", pd.to_datetime("2020-01-01"))
end_date = st.sidebar.date_input("End Date:", pd.to_datetime("2023-01-01"))

# Fetch stock data
def fetch_stock_data(ticker, start, end):
    try:
        data = yf.download(ticker, start=start, end=end)
        return data
    except Exception as e:
        st.error(f"Error fetching data: {e}")
        return None

if st.sidebar.button("Fetch Data"):
    data = fetch_stock_data(selected_ticker, start_date, end_date)
    
    if data is not None and not data.empty:
        st.success(f"Successfully fetched data for {selected_ticker}.")

        # Display raw data
        st.subheader("Raw Data")
        st.dataframe(data)

        # Plot stock prices
        st.subheader("Stock Price Chart")
        fig, ax = plt.subplots()
        ax.plot(data.index, data['Close'], label="Close Price", color="blue")
        ax.set_title(f"Closing Prices for {selected_ticker}")
        ax.set_xlabel("Date")
        ax.set_ylabel("Price")
        ax.legend()
        st.pyplot(fig)

        # Moving average inputs
        st.sidebar.header("Moving Averages")
        short_window = st.sidebar.number_input("Short Moving Average Window:", min_value=1, max_value=50, value=20)
        long_window = st.sidebar.number_input("Long Moving Average Window:", min_value=1, max_value=200, value=50)

        # Calculate moving averages
        data[f"{short_window}-Day MA"] = data['Close'].rolling(window=short_window).mean()
        data[f"{long_window}-Day MA"] = data['Close'].rolling(window=long_window).mean()

        # Plot moving averages
        st.subheader("Moving Averages")
        fig, ax = plt.subplots()
        ax.plot(data.index, data['Close'], label="Close Price", color="blue")
        ax.plot(data.index, data[f"{short_window}-Day MA"], label=f"{short_window}-Day MA", color="orange")
        ax.plot(data.index, data[f"{long_window}-Day MA"], label=f"{long_window}-Day MA", color="green")
        ax.set_title(f"Moving Averages for {selected_ticker}")
        ax.set_xlabel("Date")
        ax.set_ylabel("Price")
        ax.legend()
        st.pyplot(fig)
    else:
        st.warning("No data available. Please check your inputs.")
